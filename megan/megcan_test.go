package megan
 
import (
	"testing"
	"os"
)

func TestMegcan(t *testing.T) {
	go_output, err := run_go_megcan()
	if err != nil {
		t.Errorf("ERROR:", err)
	}
	
	SunleafTK_expected := [][]float64{
		{295.6182, 295.8868, 295.9344, 296.7096, 297.2047}, 
		{297.5717, 297.8929, 298.8764, 299.3094, 299.4378},  
		{294.3002, 294.5813, 290.01, 289.1228, 289.5467},  
		{292.5432, 292.8118, 288.2076, 287.3328, 287.7618}, 
		{290.731, 290.9875, 286.3112, 285.4392, 285.8764}, 
		{289.8369, 290.0908, 285.3087, 284.4257, 284.8632}, 
		{290.4691, 290.7321, 285.7799, 284.8607, 285.3189}, 
		{291.3685, 291.6464, 286.4776, 285.5127, 285.9867}, 
		{294.6352, 294.9277, 289.4296, 288.3796, 288.8675}, 
		{298.6524, 298.972, 293.1242, 291.9768, 292.4762}, 
		{298.1715, 298.5288, 292.9952, 291.8577, 292.3363}, 
		{295.7728, 296.1438, 291.1315, 290.1029, 290.5687}, 
		{295.0275, 295.3451, 290.2635, 289.2626, 289.7245}, 
		{297.2255, 297.5618, 298.7084, 299.2278, 299.3832}, 
		{294.641, 294.9754, 290.9479, 290.0226, 290.3605}, 
		{295.333, 295.6651, 291.4496, 290.5166, 290.868}, 
		{298.3278, 298.7189, 294.6498, 293.7299, 294.0988}, 
		{300.7791, 301.1797, 297.1625, 296.2168, 296.5847}, 
		{299.8176, 300.1142, 295.8929, 294.9984, 295.3488}, 
		{299.3605, 299.6327, 295.8914, 295.0311, 295.3308}, 
		{298.7494, 298.9302, 294.8402, 293.9897, 294.2693}, 
		{298.438, 298.5879, 294.544, 293.6347, 293.8754}, 
		{299.3921, 299.5466, 295.5102, 294.5973, 294.8353}, 
		{300.4998, 300.6654, 296.5637, 295.632, 295.8712}, 
		{300.1864, 300.3878, 296.3911, 295.5673, 295.851}}
	ShadeleafTK_expected := [][]float64{
		{295.1596, 295.4961, 292.3825, 291.6773, 291.9568}, 
		{295.8603, 296.2286, 293.0186, 292.0315, 292.1794}, 
		{294.2982, 294.5833, 296.2413, 296.5161, 296.5336}, 
		{292.5418, 292.8131, 294.3852, 294.6535, 294.6705}, 
		{290.7301, 290.9876, 292.4813, 292.7442, 292.7606}, 
		{289.8362, 290.0909, 291.5644, 291.8278, 291.8408}, 
		{290.4683, 290.7323, 292.256, 292.5234, 292.5387}, 
		{291.3675, 291.6465, 293.2484, 293.5233, 293.5382}, 
		{294.634, 294.9278, 296.6163, 296.8936, 296.909}, 
		{298.6506, 298.9738, 300.8321, 301.1232, 301.1385}, 
		{298.1722, 298.5282, 300.6912, 300.9904, 300.9817}, 
		{295.774, 296.1423, 298.3589, 298.6775, 298.6761}, 
		{295.0266, 295.3449, 297.212, 297.5029, 297.5128}, 
		{295.1815, 295.5639, 291.6578, 290.43, 290.6259}, 
		{294.6262, 294.9632, 297.4828, 297.6406, 297.4586}, 
		{295.3326, 295.6651, 297.8638, 297.9648, 297.8167}, 
		{298.3281, 298.7188, 301.4618, 301.5846, 301.3908}, 
		{300.7792, 301.1796, 304.3954, 304.571, 304.3264}, 
		{299.817, 300.1148, 302.1549, 302.1889, 302.0243}, 
		{299.3603, 299.6332, 301.903, 301.9866, 301.7834}, 
		{298.7492, 298.9305, 300.167, 300.1884, 300.0975}, 
		{298.4378, 298.5882, 299.6407, 299.7058, 299.6474}, 
		{299.3918, 299.5469, 300.6133, 300.6803, 300.6218}, 
		{300.4995, 300.6657, 301.7771, 301.8479, 301.7896}, 
		{300.1861, 300.3882, 301.7128, 301.7371, 301.6449}}
	SunPPFD_expected := [][]float64{
		{617.0796, 581.216, 534.6226, 496.9291, 476.1383}, 
		{1229, 1218.555, 1169.987, 1133.71, 1117.465}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{1432.69, 1418.28, 1360.212, 1327.029, 1314.218}, 
		{241.908, 196.2697, 144.8788, 107.2672, 87.51214}, 
		{166.2688, 134.9006, 99.57848, 73.72714, 60.14907}, 
		{221.3287, 179.5729, 132.5539, 98.14188, 80.06743}, 
		{298.6783, 242.3297, 178.8786, 132.4403, 108.0493}, 
		{168.7707, 136.9305, 101.0769, 74.83653, 61.05415}, 
		{274.2107, 222.4782, 164.225, 121.5909, 99.19792}, 
		{91.48035, 74.22169, 54.78764, 40.56435, 33.09375}, 
		{62.28123, 50.53127, 37.30027, 27.61683, 22.53074}, 
		{61.27688, 49.7164, 36.69876, 27.17148, 22.1674}, 
		{60.90872, 49.41769, 36.47827, 27.00823, 22.03422}, 
		{91.83125, 74.50639, 54.99779, 40.71994, 33.22069}}
	ShadePPFD_expected := [][]float64{
		{235.1983, 199.3347, 152.7413, 115.0479, 94.25706}, 
		{159.3897, 148.9443, 100.3765, 64.09938, 47.8544}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{0, 0, 0, 0, 0}, 
		{156.2114, 141.8008, 83.73295, 50.55008, 37.73889}, 
		{241.908, 196.2697, 144.8788, 107.2672, 87.51214}, 
		{166.2688, 134.9006, 99.57848, 73.72714, 60.14907}, 
		{221.3287, 179.5729, 132.5539, 98.14188, 80.06743}, 
		{298.6783, 242.3297, 178.8786, 132.4403, 108.0493}, 
		{168.7707, 136.9305, 101.0769, 74.83653, 61.05415}, 
		{274.2107, 222.4782, 164.225, 121.5909, 99.19792}, 
		{91.48035, 74.22169, 54.78764, 40.56435, 33.09375}, 
		{62.28123, 50.53127, 37.30027, 27.61683, 22.53074}, 
		{61.27688, 49.7164, 36.69876, 27.17148, 22.1674}, 
		{60.90872, 49.41769, 36.47827, 27.00823, 22.03422}, 
		{91.83125, 74.50639, 54.99779, 40.71994, 33.22069}}
	SunFrac_expected := [][]float64{
		{0.9111186, 0.6343481, 0.3760942, 0.22486, 0.1589793}, 
		{0.8086445, 0.3566621, 0.1114906, 0.03613561, 0.01703344}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.2, 0.2, 0.2, 0.2, 0.2}, 
		{0.7528764, 0.2536033, 0.05476007, 0.01251686, 0.004684461}, 
		{0.9009956, 0.6008364, 0.3350512, 0.1887849, 0.1283043}, 
		{0.9366858, 0.7258638, 0.5015498, 0.3480518, 0.2718508}, 
		{0.95176, 0.7847132, 0.5927957, 0.4489425, 0.3718549}, 
		{0.9592984, 0.8155808, 0.644033, 0.5094811, 0.434578}, 
		{0.9630322, 0.8312343, 0.6709146, 0.5423182, 0.4693694}, 
		{0.9642918, 0.8365706, 0.6802174, 0.5538514, 0.4817112}, 
		{0.9634591, 0.8330401, 0.6740549, 0.5462016, 0.4735181}, 
		{0.9602855, 0.8196954, 0.65104, 0.51797, 0.443522}, 
		{0.9536892, 0.7925196, 0.6055322, 0.4637364, 0.3870063}, 
		{0.9406589, 0.7410105, 0.5242341, 0.372282, 0.2953098}, 
		{0.9113433, 0.6351085, 0.3770557, 0.2257312, 0.1597351}}
	
	expected_output := Megcan_output{SunleafTK_expected, ShadeleafTK_expected, SunPPFD_expected, ShadePPFD_expected, SunFrac_expected}

	if !are_megcan_outputs_equal(go_output, expected_output) {
		t.Errorf("Go and standalone versions produce different results (epsilon=%v)\n", EPSILON)
	}
}

func TestMegcanAgainstStandalone(t *testing.T) {
	if os.Getenv("MEGAN_STANDALONE_TEST") == "" {
		t.Skip("skipping test; $MEGAN_STANDALONE_TEST not set")
	}

	go_output, err := run_go_megcan()
	if err != nil {
		t.Errorf("ERROR:", err)
	}
	
	standalone_output := run_standalone_megcan()
	
	if !are_megcan_outputs_equal(go_output, standalone_output) {
		t.Errorf("Go and standalone versions produce different results (epsilon=%v)\n", EPSILON)
	}
}

func run_go_megcan() (output Megcan_output, err error) {
	start_date := 2013145
	start_time := 0
	time_increment := 10000
	latitude := 24.9699
	longitude := -106.4971
	leaf_area_index := []float64{1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165, 1.5165}
	temperature := []float64{297.082306, 297.727692, 296.182587, 294.303192, 292.372711, 291.441986, 292.145111, 293.152191, 296.554413, 300.812408, 300.780090, 298.426788, 297.198090, 297.152710, 296.918396, 297.635986, 301.010590, 303.602386, 301.852600, 301.242310, 300.171814, 299.743988, 300.724091, 301.895599, 301.726196}	
	incoming_photosynthetic_active_radiation := []float64{170.3816, 169.4689, 169.6857, 170.1833, 170.7162, 171.3177, 169.3093, 168.2702, 165.8572, 164.0267, 117.4694, 131.7137, 154.3903, 151.1533, 79.20123, 51.97546, 69.20062, 93.79958, 52.06078, 85.48535, 27.98305, 19.00437, 18.71786, 18.64834, 28.50706}	
	wind_speed := []float64{5.094378, 4.802262, 4.926229, 5.486905, 6.240457, 6.69226, 6.650759, 6.507776, 6.637711, 6.326972, 4.112444, 3.278793, 4.672177, 5.296508, 5.2028, 4.718732, 4.439407, 5.261704, 7.043137, 8.519012, 9.130258, 9.083385, 8.90703, 8.649946, 7.982096}
	pressure := []float64{82208.09, 82074.07, 79915.18, 77888.27, 75807.18, 74659.62, 74743.4, 74867.3, 77366.51, 80634.96, 80539.65, 78878.96, 77915.15, 77785.88, 77854.4, 79161.82, 82624.84, 84891.8, 84355.8, 84116.77, 84441.45, 84297.27, 85458.9, 86283.28, 85663.48}
	water_vapor_mixing_ratio := []float64{0.007762248, 0.007521978, 0.007424137, 0.007346272, 0.007168575, 0.00690266, 0.006551034, 0.006116394, 0.005739891, 0.00535665, 0.005357311, 0.005891337, 0.006285786, 0.006444469, 0.006613181, 0.006978375, 0.007246723, 0.00755674, 0.008359249, 0.008913932, 0.009405961, 0.009717779, 0.009829475, 0.009771289, 0.009766233}
	canopy_type_factor := []float64{0, 21.6363, 30.5448, 34.4223, 33.8522, 36.0447}
	
	return ConvertAboveCanopyMeteorologyToWithinCanopyMeteorology(start_date, start_time, time_increment, latitude, longitude, leaf_area_index, temperature, incoming_photosynthetic_active_radiation, wind_speed, pressure, water_vapor_mixing_ratio, canopy_type_factor)
}

func run_standalone_megcan() Megcan_output {
	// Run standalone MEGCAN script
	run_command("cd ./MEGAN3/work/; ./run.megcan.v3.single.csh")
	
	// Extract outputs from NETCDF files
	output_file := "./MEGAN3/Output/INT/CANMET.tceq_12km.2013145.single.nc"
	SunleafTK := parse_netcdf_file("SunleafTK", output_file)
	ShadeleafTK := parse_netcdf_file("ShadeleafTK", output_file)
	SunPPFD := parse_netcdf_file("SunPPFD", output_file)
	ShadePPFD := parse_netcdf_file("ShadePPFD", output_file)
	SunFrac := parse_netcdf_file("SunFrac", output_file)
	
	timestep_count := 25
	canopy_layers := 5
	return Megcan_output{Convert1Dto2D(SunleafTK, timestep_count, canopy_layers), 
						 Convert1Dto2D(ShadeleafTK, timestep_count, canopy_layers), 
						 Convert1Dto2D(SunPPFD, timestep_count, canopy_layers), 
						 Convert1Dto2D(ShadePPFD, timestep_count, canopy_layers), 
						 Convert1Dto2D(SunFrac, timestep_count, canopy_layers)}
}

func are_megcan_outputs_equal(output1 Megcan_output, output2 Megcan_output) bool {
	SunleafTK_equal := arrays_approximately_equal_2d(output1.SunleafTK, output2.SunleafTK, EPSILON, "SunleafTK")
	ShadeleafTK_equal := arrays_approximately_equal_2d(output1.ShadeleafTK, output2.ShadeleafTK, EPSILON, "ShadeleafTK")
	SunPPFD_equal := arrays_approximately_equal_2d(output1.SunPPFD, output2.SunPPFD, EPSILON, "SunPPFD")
	ShadePPFD_equal := arrays_approximately_equal_2d(output1.ShadePPFD, output2.ShadePPFD, EPSILON, "ShadePPFD")
	SunFrac_equal := arrays_approximately_equal_2d(output1.SunFrac, output2.SunFrac, EPSILON, "SunFrac")
	
	return SunleafTK_equal && ShadeleafTK_equal && SunPPFD_equal && ShadePPFD_equal && SunFrac_equal
}